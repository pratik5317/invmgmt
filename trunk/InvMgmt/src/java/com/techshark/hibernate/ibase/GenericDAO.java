/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.techshark.hibernate.ibase;

import java.io.Serializable;
import java.util.List;

/**
 * Generic Interface for Hibernate DAO.
 *  
 * @author TSUser
 * 
 * Generated Sep 1, 2011 02:10:00 PM
 *
 * @param <DomainObject> POJO Class Name for which Hibernate Dao will be used
 * @param <KeyType> Object of primary Key type which will be used in table. (Ex. Integer, Long, etc.)
 * 
 * 
 */
public interface GenericDAO<DomainObject extends Serializable, KeyType extends Serializable> {

	/**
	 * Give list of all entities of underlying Domain Object. 
	 * @return List of all entities.
	 */
	public List<DomainObject> getList();
	

	
	/**
	 * Returns the total number of Entities that is affected by sql query,
	 * @param sql SQL Query
	 * @return Number of Entities affected By SQL Query.
	 */
	public int getRecordBySQLQuery(String query);
	
	/**
	 * Returns Domain object whose Key-value pair matched.
	 * @param keyName Column name 
	 * @param keyValue any value that is being matched under Column name.
	 * @return DomainObject
	 */
	public DomainObject getRecordByKeyandValue(String keyName,Object keyValue);
	
        /**
	 * Returns Domain object whose Key-value pair matched.
	 * @param keyName Column name 
	 * @param keyValue any value that is being matched under Column name.
	 * @return DomainObject
	 */
	public List getRecordListByKeyandValue(String keyName,Object keyValue);
	
	/**
	 * Returns list of Domainobjects whose Key-value pair matched.
	 * @param colname Column name
	 * @param keyValue List of values.
	 * @return List<DomainObject> according to the Condition satisfied.
	 */
	public List<DomainObject> getListByKeyandValue(String colname,List<Object> keyValue);
	
	/**
	 * Returns the list of Entities according to the condition applied.
	 * @param condition Condition
	 * @return List<DomainObject> according to condition satisfied.
	 */
    public List<DomainObject> getListByCondition(String condition);
	
    /**
	 * Find Object based on primary key.
	 * @param id Identifier value is passed.
	 * @return DomainObject i.e POJO which has the passed id value.
	 */
	public DomainObject getRecordByPrimaryKey(KeyType id);
	
	/**
	 * get the list of primary keys based on the condition.
	 * @param condition Condition 
	 * @return List<KeyType> of Primary Keys according to the Condition.
	 */
	public List<KeyType> getPrimaryKeyCollection(String condition);
	
	/**
	 * Insert the Domain Object that is going to persist into the Database. 
	 * @param object Domain Object which is going to persist into the Database
	 * @return KeyType Serializable value generated By Hibernate due to session.save().
	 */
	public KeyType insert(DomainObject object);
	
	/**
	 * Update the Domain Object.
	 * @param object Domain Object that is being changed/updated.
	 * @return 1 if Domain Object is being successfully updated
	 * 		   0 if Exception Generation while updating the Object.
	 */
	public int update(DomainObject object);
	

	/**
	 * Deleting Domain Object.
	 * @param object Domain Object that is going to be delete.
	 */
	public int delete(DomainObject object);
	
	/**
	 * Delete Object whose oid(Object Identifier) matched with given Primary Key.
	 * @param id Identifier value.
	 */
	public void deleteById(KeyType id);	
	
	/**
	 * Count the total number of Entities.
	 * @return integer value that specifies the number of Total Entities.
	 */
	public int count();
	
	/**
	 * Count the total Entities based on Condition.
	 * @param condition Condition
	 * @return integer value that specifies the number of Total Entities based on the condtion.
	 */
	public int count(String condition);
	
	/**
	 * Returns list of Domain objects whose Key-value pair matched.
	 * @param colname Column name
	 * @param value
	 * @return List<DomainObject> according to the Condition satisfied.
	 */
	public List<DomainObject> getListByKeyandValue(String colname,Object value);	
	
        
	
	/**
	 * Returns the updated entities using update/delete HQL. 
	 */
	public int getExecuteUpdate(String hql);
	
	/**
	 * Returns list of columns in select clause using select SQL.
	 */
	public List getListBySQLQuery(String sql);
	
	/**
	 * Returns list of colums in select clause using select HQL.
	 */
	public List getListByHQLQuery(String hql);
	
	/**
	 *  Method called only if String in From HQL Query Format Ex. (From Tblname).. 
	 */
	public List getListByFromClause(String hql);
	
	/**
	 *  Method for Pagination - Limit offset .. 
	 */
	public List getListByPage(String query,int limit,int offset);

        public String getJsonPageData(final int pageno, final int offset,
            final String sortColumn, final String sortOrder);
	/**
	 * Gets the List of Domain Objects for the table. Mainly used for pagination
	 * in manage pages
	 * 
	 * @param columnName
	 *            Name of the column which is sorted
	 * @param sortOrder
	 *            Order of the sorting ( asc or desc )
	 * @param limit
	 *            Number of records which we want to fetch
	 * @param offset
	 *            Begining index of the records
	 * @return List of DomainObject.
	 */
//        public String getJsonsearch(final int pageno, final int totalLimit,
//            final String colName, final String sortType ,final String searchString,final String searchField , final String searchOper);
                
	public List<DomainObject> getListByPage(String columnName,
			String sortOrder, int limit, int offset);
	
        public String getJson(final int pageno, final int offset,
            final String sortColumn, final String sortOrder,List<DomainObject> list);
}
